package flatland.protobuf.test.core;

import "flatland/protobuf/extensions.proto";

option java_package = "flatland.protobuf.test";
option java_outer_classname = "Core";

message Foo {
  optional uint32   id        = 1 [default = 43];
  optional string   label     = 2 [(meta) = "{:a 1 :b 2 :c 3}"];
  repeated string   tags      = 3;
  optional Foo      parent    = 4;
  repeated Response responses = 5;

  repeated double doubles = 6;
  repeated float  floats  = 7;

  optional double lat  = 8;
  optional float  long = 9;

  repeated Count counts = 10 [(map_by) = "key"];

  repeated Time time = 11 [(succession) = true];

  enum Response {
    yes      = 0;
    no       = 1;
    maybe    = 2;
    not_sure = 3;
  }

  repeated Item  tag_set   = 20 [(set)    = true];
  repeated Pair  attr_map  = 21 [(map)    = true];
  repeated Foo   foo_by_id = 22 [(map_by) = "id"];
  repeated Group groups    = 23 [(map)    = true];
  repeated Item  item_map  = 24 [(map_by) = "item"];
  repeated Pair  pair_map  = 25 [(map_by) = "key"];
  optional bool  deleted   = 26 [default  = false];
  repeated Thing things = 27 [(map_by) = "id"];
}

message Bar {
  optional int32  int  = 1 [(nullable) = true, (null_int)    = -1];
  optional int64  long = 2 [(nullable) = true, (null_long)   = -999999999999];
  optional float  flt  = 3 [(nullable) = true, (null_float)  = -0.0001];
  optional double dbl  = 4 [(nullable) = true, (null_double) = -0.00000001];
  optional string str  = 5 [(nullable) = true, (null_string) = "NULL"];
  optional Enu    enu  = 6 [(nullable) = true, (null_enum)   = 3];

  enum Enu {
    a    = 0;
    b    = 1;
    c    = 2;
    nil  = 3;
  }

  repeated string label  = 10 [(nullable) = true, (null_string) = "", (succession) = true];
  repeated string labels = 11 [(nullable) = true, (null_string) = ""];
}

message Time {
  optional sint32 year   = 1;
  optional int32  month  = 2;
  optional int32  day    = 3;
  optional int32  hour   = 4;
  optional int32  minute = 5;
}

message Pair {
  required string key = 1;
  required string val = 2;
}

message Group {
  required string key = 1;
  repeated Foo    val = 2;
}

message Item {
  required string item   = 1;
  required bool   exists = 2 [default = true];
}

message Count {
  required string key = 1;
  repeated int32  i   = 2 [(counter) = true];
  repeated double d   = 3 [(counter) = true];
}

message ErrorMsg {
  required sint32 code = 1;
  optional string data = 2;
}

message Response {
  required bool ok = 1;
  optional ErrorMsg error = 2;
}

message Thing {
  optional string id = 1;
  optional bool marked = 2;
}
